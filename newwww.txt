import json
import cv2
import numpy as np
from collections import Counter
import matplotlib.pyplot as plt

# Function to load the image
def load_image(image_path):
    image = cv2.imread(image_path)
    if image is None:
        raise ValueError(f"Image at {image_path} could not be loaded.")
    return image

# Function to get the most common color in a boundary
def most_frequent_color(boundary_pixels):
    pixels = boundary_pixels.reshape(-1, 3)  # Reshape to get all pixel values
    pixels = [tuple(p) for p in pixels]  # Convert array to list of tuples
    most_common = Counter(pixels).most_common(1)[0][0]  # Get the most common color
    return most_common

# Function to create an enlarged rectangle to cover borders/shadows
def enlarge_rectangle(points, enlargement_size):
    x1, y1 = points[0]
    x2, y2 = points[1]
    
    # Enlarging the rectangle
    x1 = max(0, x1 - enlargement_size)
    y1 = max(0, y1 - enlargement_size)
    x2 = min(img.shape[1], x2 + enlargement_size)
    y2 = min(img.shape[0], y2 + enlargement_size)
    
    return [(int(x1), int(y1)), (int(x2), int(y2))]

# Function to fill the rectangle with the most frequent boundary color
def fill_rectangle(image, rect_coords, boundary_thickness=10):
    x1, y1 = rect_coords[0]
    x2, y2 = rect_coords[1]

    # Get the boundary area (outside the rectangle)
    boundary_x1 = max(0, x1 - boundary_thickness)
    boundary_y1 = max(0, y1 - boundary_thickness)
    boundary_x2 = min(image.shape[1], x2 + boundary_thickness)
    boundary_y2 = min(image.shape[0], y2 + boundary_thickness)

    # Extract the boundary region pixels
    boundary_pixels = np.concatenate([
        image[boundary_y1:boundary_y1 + boundary_thickness, boundary_x1:boundary_x2],  # Top boundary
        image[boundary_y2 - boundary_thickness:boundary_y2, boundary_x1:boundary_x2],  # Bottom boundary
        image[boundary_y1:boundary_y2, boundary_x1:boundary_x1 + boundary_thickness],  # Left boundary
        image[boundary_y1:boundary_y2, boundary_x2 - boundary_thickness:boundary_x2]   # Right boundary
    ])

    # Get the most frequent color in the boundary
    dominant_color = most_frequent_color(boundary_pixels)

    # Fill the rectangle with the dominant color
    image[y1:y2, x1:x2] = dominant_color

# Main function to handle the entire process
def process_image(image_path, json_path, enlargement_size=5, boundary_thickness=10):
    # Load the image
    img = load_image(image_path)

    # Load the JSON file
    with open(json_path, 'r') as f:
        data = json.load(f)

    # Process each rectangle in the JSON
    for shape in data['shapes']:
        if shape['shape_type'] == 'rectangle':
            points = shape['points']
            # Enlarge the rectangle
            enlarged_rect = enlarge_rectangle(points, enlargement_size)
            # Fill the rectangle with the most frequent boundary color
            fill_rectangle(img, enlarged_rect, boundary_thickness)

    # Save or display the result
    output_path = "output_image.jpg"
    cv2.imwrite(output_path, img)
    print(f"Processed image saved at {output_path}")
    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))  # Show image in RGB format for matplotlib
    plt.show()

# Example usage
image_path = '/mnt/data/file-HIrz4mnILZt7mr5bolpWhW4r'  # Path to the input image
json_path = '/mnt/data/file-1cigKgq5lPSVipin1AJPCWfY'   # Path to the input JSON
process_image(image_path, json_path, enlargement_size=10, boundary_thickness=15)
