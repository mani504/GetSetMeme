import json
import cv2
import numpy as np
from collections import Counter
import matplotlib.pyplot as plt

# Function to load the image
def load_image(image_path):
    image = cv2.imread(image_path)
    if image is None:
        raise ValueError(f"Image at {image_path} could not be loaded.")
    return image

# Function to get the most common color in a boundary
def most_frequent_color(boundary_pixels):
    pixels = boundary_pixels.reshape(-1, 3)  # Reshape to get all pixel values
    pixels = [tuple(p) for p in pixels]  # Convert array to list of tuples
    most_common = Counter(pixels).most_common(1)[0][0]  # Get the most common color
    return most_common

# Function to create an enlarged rectangle to cover borders/shadows
def enlarge_rectangle(points, enlargement_size):
    x1, y1 = points[0]
    x2, y2 = points[1]
    
    # Enlarging the rectangle
    x1 = max(0, x1 - enlargement_size)
    y1 = max(0, y1 - enlargement_size)
    x2 = min(img.shape[1], x2 + enlargement_size)
    y2 = min(img.shape[0], y2 + enlargement_size)
    
    return [(int(x1), int(y1)), (int(x2), int(y2))]

# Function to fill the rectangle with the most frequent boundary color
def fill_rectangle(image, rect_coords, boundary_thickness=10):
    x1, y1 = rect_coords[0]
    x2, y2 = rect_coords[1]

    # Get the boundary area (outside the rectangle)
    boundary_x1 = max(0, x1 - boundary_thickness)
    boundary_y1 = max(0, y1 - boundary_thickness)
    boundary_x2 = min(image.shape[1], x2 + boundary_thickness)
    boundary_y2 = min(image.shape[0], y2 + boundary_thickness)

    # Extract the boundary region pixels
    boundary_pixels = np.concatenate([
        image[boundary_y1:boundary_y1 + boundary_thickness, boundary_x1:boundary_x2],  # Top boundary
        image[boundary_y2 - boundary_thickness:boundary_y2, boundary_x1:boundary_x2],  # Bottom boundary
        image[boundary_y1:boundary_y2, boundary_x1:boundary_x1 + boundary_thickness],  # Left boundary
        image[boundary_y1:boundary_y2, boundary_x2 - boundary_thickness:boundary_x2]   # Right boundary
    ])

    # Get the most frequent color in the boundary
    dominant_color = most_frequent_color(boundary_pixels)

    # Fill the rectangle with the dominant color
    image[y1:y2, x1:x2] = dominant_color

# Main function to handle the entire process
def process_image(image_path, json_path, enlargement_size=5, boundary_thickness=10):
    # Load the image
    img = load_image(image_path)

    # Load the JSON file
    with open(json_path, 'r') as f:
        data = json.load(f)

    # Process each rectangle in the JSON
    for shape in data['shapes']:
        if shape['shape_type'] == 'rectangle':
            points = shape['points']
            # Enlarge the rectangle
            enlarged_rect = enlarge_rectangle(points, enlargement_size)
            # Fill the rectangle with the most frequent boundary color
            fill_rectangle(img, enlarged_rect, boundary_thickness)

    # Save or display the result
    output_path = "output_image.jpg"
    cv2.imwrite(output_path, img)
    print(f"Processed image saved at {output_path}")
    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))  # Show image in RGB format for matplotlib
    plt.show()

# Example usage
image_path = '/mnt/data/file-HIrz4mnILZt7mr5bolpWhW4r'  # Path to the input image
json_path = '/mnt/data/file-1cigKgq5lPSVipin1AJPCWfY'   # Path to the input JSON
process_image(image_path, json_path, enlargement_size=10, boundary_thickness=15)




# Function to find the most frequent boundary color
def get_most_frequent_boundary_color(image, boundary_coords, boundary_thickness):
    boundary_x1, boundary_y1 = boundary_coords[0]
    boundary_x2, boundary_y2 = boundary_coords[1]

    # Extract top, bottom, left, and right boundary regions
    top_boundary = image[boundary_y1:boundary_y1 + boundary_thickness, boundary_x1:boundary_x2]
    bottom_boundary = image[boundary_y2 - boundary_thickness:boundary_y2, boundary_x1:boundary_x2]
    left_boundary = image[boundary_y1:boundary_y2, boundary_x1:boundary_x1 + boundary_thickness]
    right_boundary = image[boundary_y1:boundary_y2, boundary_x2 - boundary_thickness:boundary_x2]

    # Concatenate all boundary regions into a single array
    boundary_pixels = np.concatenate([top_boundary, bottom_boundary, left_boundary, right_boundary], axis=0)

    # Find the most frequent pixel color in the boundary
    most_frequent_color = np.bincount(boundary_pixels.reshape(-1, 3), axis=0).argmax()

    return most_frequent_color











import cv2
import numpy as np
import json

# Function to enlarge the rectangle by a specified amount
def enlarge_rectangle(points, enlargement_size, img_shape):
    x1, y1 = points[0]
    x2, y2 = points[1]
    
    # Ensure that enlargement stays within image bounds
    x1 = max(0, x1 - enlargement_size)
    y1 = max(0, y1 - enlargement_size)
    x2 = min(img_shape[1], x2 + enlargement_size)
    y2 = min(img_shape[0], y2 + enlargement_size)
    
    return [(int(x1), int(y1)), (int(x2), int(y2))]

# Function to find the most frequent color in the boundary region
def get_most_frequent_boundary_color(image, boundary_coords, boundary_thickness):
    boundary_x1, boundary_y1 = boundary_coords[0]
    boundary_x2, boundary_y2 = boundary_coords[1]

    # Extract boundary pixels: top, bottom, left, and right
    top_boundary = image[boundary_y1:boundary_y1 + boundary_thickness, boundary_x1:boundary_x2]
    bottom_boundary = image[boundary_y2 - boundary_thickness:boundary_y2, boundary_x1:boundary_x2]
    left_boundary = image[boundary_y1:boundary_y2, boundary_x1:boundary_x1 + boundary_thickness]
    right_boundary = image[boundary_y1:boundary_y2, boundary_x2 - boundary_thickness:boundary_x2]

    # Concatenate all boundary regions into a single array
    boundary_pixels = np.concatenate([top_boundary, bottom_boundary, left_boundary, right_boundary], axis=0)

    # Find the most frequent pixel color in the boundary
    pixels_flat = boundary_pixels.reshape(-1, boundary_pixels.shape[-1])
    unique, counts = np.unique(pixels_flat, axis=0, return_counts=True)
    most_frequent_color = unique[np.argmax(counts)]
    
    return most_frequent_color

# Function to fill the rectangle with the most frequent boundary color
def fill_rectangle_with_color(image, rect_coords, color):
    x1, y1 = rect_coords[0]
    x2, y2 = rect_coords[1]
    
    # Fill the rectangle with the specified color
    image[y1:y2, x1:x2] = color
    return image

# Main function to process the image and fill rectangles
def process_image(image_path, json_path, enlargement_size=5, boundary_thickness=3):
    # Load the image
    image = cv2.imread(image_path)

    # Load the JSON file with rectangle coordinates
    with open(json_path, 'r') as f:
        rectangles = json.load(f)['rectangles']

    for rect in rectangles:
        # Extract the original rectangle coordinates
        rect_coords = [(rect['x1'], rect['y1']), (rect['x2'], rect['y2'])]
        
        # Enlarge the rectangle to account for the borders and shadows
        enlarged_rect = enlarge_rectangle(rect_coords, enlargement_size, image.shape)
        
        # Get the most frequent color from the boundary of the enlarged rectangle
        most_frequent_color = get_most_frequent_boundary_color(image, enlarged_rect, boundary_thickness)
        
        # Fill the actual rectangle with the most frequent boundary color
        image = fill_rectangle_with_color(image, rect_coords, most_frequent_color)

    return image

# Script execution part
if __name__ == "__main__":
    image_path = '/mnt/data/file-HIrz4mnILZt7mr5bolpWhW4r'  # Path to your image file
    json_path = '/mnt/data/file-1cigKgq5lPSVipin1AJPCWfY'  # Path to your JSON file

    # Process the image with rectangles filled
    result_image = process_image(image_path, json_path)

    # Save the result image to check output
    cv2.imwrite("/mnt/data/result_image.png", result_image)













import cv2
import numpy as np
import json

# Function to enlarge the rectangle by a specified amount
def enlarge_rectangle(points, enlargement_size, img_shape):
    x1, y1 = points[0]
    x2, y2 = points[1]
    
    # Ensure that enlargement stays within image bounds
    x1 = max(0, x1 - enlargement_size)
    y1 = max(0, y1 - enlargement_size)
    x2 = min(img_shape[1], x2 + enlargement_size)
    y2 = min(img_shape[0], y2 + enlargement_size)
    
    return [(int(x1), int(y1)), (int(x2), int(y2))]

# Function to find the most frequent color in the boundary region
def get_most_frequent_boundary_color(image, boundary_coords, boundary_thickness):
    boundary_x1, boundary_y1 = boundary_coords[0]
    boundary_x2, boundary_y2 = boundary_coords[1]

    # Extract boundary pixels: top, bottom, left, and right
    top_boundary = image[boundary_y1:boundary_y1 + boundary_thickness, boundary_x1:boundary_x2]
    bottom_boundary = image[boundary_y2 - boundary_thickness:boundary_y2, boundary_x1:boundary_x2]
    left_boundary = image[boundary_y1:boundary_y2, boundary_x1:boundary_x1 + boundary_thickness]
    right_boundary = image[boundary_y1:boundary_y2, boundary_x2 - boundary_thickness:boundary_x2]

    # Concatenate all boundary regions into a single array
    boundary_pixels = np.concatenate([top_boundary, bottom_boundary, left_boundary, right_boundary], axis=0)

    # Find the most frequent pixel color in the boundary
    pixels_flat = boundary_pixels.reshape(-1, boundary_pixels.shape[-1])
    unique, counts = np.unique(pixels_flat, axis=0, return_counts=True)
    most_frequent_color = unique[np.argmax(counts)]
    
    return most_frequent_color

# Function to fill the rectangle with the most frequent boundary color
def fill_rectangle_with_color(image, rect_coords, color):
    x1, y1 = rect_coords[0]
    x2, y2 = rect_coords[1]
    
    # Fill the rectangle with the specified color
    image[y1:y2, x1:x2] = color
    return image

# Main function to process the image and fill rectangles
def process_image(image_path, json_path, enlargement_size=5, boundary_thickness=3):
    # Load the image
    image = cv2.imread(image_path)
    if image is None:
        raise FileNotFoundError(f"Image not found at {image_path}")

    # Load the JSON file with rectangle coordinates
    with open(json_path, 'r') as f:
        data = json.load(f)
    
    # Process 'shapes' key in JSON
    if 'shapes' not in data:
        raise KeyError("'shapes' key not found in JSON file.")
    
    shapes = data['shapes']

    for shape in shapes:
        if shape['shape_type'] == 'rectangle':
            points = shape['points']
            rect_coords = [(int(points[0][0]), int(points[0][1])), (int(points[1][0]), int(points[1][1]))]
            
            # Enlarge the rectangle to account for the borders and shadows
            enlarged_rect = enlarge_rectangle(rect_coords, enlargement_size, image.shape)
            
            # Get the most frequent color from the boundary of the enlarged rectangle
            most_frequent_color = get_most_frequent_boundary_color(image, enlarged_rect, boundary_thickness)
            
            # Fill the actual rectangle with the most frequent boundary color
            image = fill_rectangle_with_color(image, rect_coords, most_frequent_color)

    return image

# Script execution part
if __name__ == "__main__":
    image_path = '/mnt/data/file-HIrz4mnILZt7mr5bolpWhW4r'  # Path to your image file
    json_path = '/mnt/data/file-1cigKgq5lPSVipin1AJPCWfY'  # Path to your JSON file

    # Process the image with rectangles filled
    result_image = process_image(image_path, json_path)

    # Save the result image to check output
    output_image_path = "/mnt/data/result_image.png"
    cv2.imwrite(output_image_path, result_image)
    print(f"Processed image saved at {output_image_path}")








def get_most_frequent_boundary_color(image, boundary_coords, boundary_thickness):
    boundary_x1, boundary_y1 = boundary_coords[0]
    boundary_x2, boundary_y2 = boundary_coords[1]

    # Extract boundary pixels: top, bottom, left, and right
    top_boundary = image[boundary_y1:boundary_y1 + boundary_thickness, boundary_x1:boundary_x2]
    bottom_boundary = image[boundary_y2 - boundary_thickness:boundary_y2, boundary_x1:boundary_x2]
    left_boundary = image[boundary_y1:boundary_y2, boundary_x1:boundary_x1 + boundary_thickness]
    right_boundary = image[boundary_y1:boundary_y2, boundary_x2 - boundary_thickness:boundary_x2]

    # Make sure all boundary arrays have the same number of columns (width) by padding
    max_width = max(top_boundary.shape[1], bottom_boundary.shape[1], left_boundary.shape[1], right_boundary.shape[1])

    top_boundary = np.pad(top_boundary, ((0, 0), (0, max_width - top_boundary.shape[1]), (0, 0)), mode='constant')
    bottom_boundary = np.pad(bottom_boundary, ((0, 0), (0, max_width - bottom_boundary.shape[1]), (0, 0)), mode='constant')
    left_boundary = np.pad(left_boundary, ((0, 0), (0, max_width - left_boundary.shape[1]), (0, 0)), mode='constant')
    right_boundary = np.pad(right_boundary, ((0, 0), (0, max_width - right_boundary.shape[1]), (0, 0)), mode='constant')

    # Concatenate all boundary regions into a single array
    boundary_pixels = np.concatenate([top_boundary, bottom_boundary, left_boundary, right_boundary], axis=0)

    # Find the most frequent pixel color in the boundary
    pixels_flat = boundary_pixels.reshape(-1, boundary_pixels.shape[-1])
    unique, counts = np.unique(pixels_flat, axis=0, return_counts=True)
    most_frequent_color = unique[np.argmax(counts)]
    
    return most_frequent_color



















































import cv2
import numpy as np
import json

# Function to enlarge the rectangle by a specified amount
def enlarge_rectangle(points, enlargement_size, img_shape):
    x1, y1 = points[0]
    x2, y2 = points[1]
    
    # Ensure that enlargement stays within image bounds
    x1 = max(0, x1 - enlargement_size)
    y1 = max(0, y1 - enlargement_size)
    x2 = min(img_shape[1], x2 + enlargement_size)
    y2 = min(img_shape[0], y2 + enlargement_size)
    
    return [(int(x1), int(y1)), (int(x2), int(y2))]

# Function to find the most frequent color in the boundary region (outside enlarged rectangle)
def get_most_frequent_boundary_color(image, outer_boundary_coords, inner_rect_coords):
    boundary_x1, boundary_y1 = outer_boundary_coords[0]
    boundary_x2, boundary_y2 = outer_boundary_coords[1]
    
    inner_x1, inner_y1 = inner_rect_coords[0]
    inner_x2, inner_y2 = inner_rect_coords[1]
    
    # Extract boundary pixels: the area between outer boundary and inner enlarged rectangle
    top_boundary = image[boundary_y1:inner_y1, boundary_x1:boundary_x2]
    bottom_boundary = image[inner_y2:boundary_y2, boundary_x1:boundary_x2]
    left_boundary = image[inner_y1:inner_y2, boundary_x1:inner_x1]
    right_boundary = image[inner_y1:inner_y2, inner_x2:boundary_x2]

    # Concatenate all boundary regions into a single array
    boundary_pixels = np.concatenate([top_boundary, bottom_boundary, left_boundary, right_boundary], axis=0)

    # Find the most frequent pixel color in the boundary
    pixels_flat = boundary_pixels.reshape(-1, boundary_pixels.shape[-1])
    unique, counts = np.unique(pixels_flat, axis=0, return_counts=True)
    most_frequent_color = unique[np.argmax(counts)]
    
    return most_frequent_color

# Function to fill the rectangle with the most frequent boundary color
def fill_rectangle_with_color(image, rect_coords, color):
    x1, y1 = rect_coords[0]
    x2, y2 = rect_coords[1]
    
    # Fill the rectangle with the specified color
    image[y1:y2, x1:x2] = color
    return image

# Main function to process the image and fill rectangles
def process_image(image_path, json_path, enlargement_size=10, boundary_margin=15):
    # Load the image
    image = cv2.imread(image_path)

    # Load the JSON file with shape coordinates
    with open(json_path, 'r') as f:
        shapes = json.load(f)['shapes']

    for shape in shapes:
        # Extract the original rectangle coordinates
        points = shape['points']
        rect_coords = [(int(points[0][0]), int(points[0][1])), (int(points[1][0]), int(points[1][1]))]
        
        # Enlarge the rectangle to account for the borders and shadows
        enlarged_rect = enlarge_rectangle(rect_coords, enlargement_size, image.shape)
        
        # Create an outer boundary that is larger than the enlarged rectangle
        outer_boundary = enlarge_rectangle(enlarged_rect, boundary_margin, image.shape)
        
        # Get the most frequent color from the outer boundary (around the enlarged rectangle)
        most_frequent_color = get_most_frequent_boundary_color(image, outer_boundary, enlarged_rect)
        
        # Fill the original rectangle with the most frequent boundary color
        image = fill_rectangle_with_color(image, rect_coords, most_frequent_color)

    return image

# Script execution part
if __name__ == "__main__":
    image_path = '/mnt/data/file-HIrz4mnILZt7mr5bolpWhW4r'  # Path to your image file
    json_path = '/mnt/data/file-1cigKgq5lPSVipin1AJPCWfY'  # Path to your JSON file

    # Process the image with rectangles filled
    result_image = process_image(image_path, json_path)

    # Save the result image to check output
    cv2.imwrite("/mnt/data/result_image.png", result_image)







def get_most_frequent_boundary_color(image, outer_boundary_coords, inner_rect_coords):
    boundary_x1, boundary_y1 = outer_boundary_coords[0]
    boundary_x2, boundary_y2 = outer_boundary_coords[1]
    
    inner_x1, inner_y1 = inner_rect_coords[0]
    inner_x2, inner_y2 = inner_rect_coords[1]

    boundary_pixels = []

    # Extract boundary pixels: the area between outer boundary and inner enlarged rectangle
    if inner_y1 > boundary_y1:
        top_boundary = image[boundary_y1:inner_y1, boundary_x1:boundary_x2]
        boundary_pixels.append(top_boundary)
    
    if boundary_y2 > inner_y2:
        bottom_boundary = image[inner_y2:boundary_y2, boundary_x1:boundary_x2]
        boundary_pixels.append(bottom_boundary)
    
    if inner_x1 > boundary_x1:
        left_boundary = image[inner_y1:inner_y2, boundary_x1:inner_x1]
        boundary_pixels.append(left_boundary)
    
    if boundary_x2 > inner_x2:
        right_boundary = image[inner_y1:inner_y2, inner_x2:boundary_x2]
        boundary_pixels.append(right_boundary)

    # Concatenate all boundary regions into a single array
    if boundary_pixels:
        boundary_pixels = np.vstack(boundary_pixels)  # Use vstack to avoid axis mismatch

    # Find the most frequent pixel color in the boundary
    pixels_flat = boundary_pixels.reshape(-1, boundary_pixels.shape[-1])
    unique, counts = np.unique(pixels_flat, axis=0, return_counts=True)
    most_frequent_color = unique[np.argmax(counts)]
    
    return most_frequent_color






























# Function to find the most frequent color in a boundary region
def get_most_frequent_color_in_boundary(boundary_pixels):
    # Reshape boundary pixels to a flat list of RGB values
    pixels_flat = boundary_pixels.reshape(-1, boundary_pixels.shape[-1])
    
    # Find the most frequent pixel color in the boundary
    unique, counts = np.unique(pixels_flat, axis=0, return_counts=True)
    most_frequent_color = unique[np.argmax(counts)]
    
    return most_frequent_color

# Function to get the most frequent color around the rectangle's boundaries
def get_most_frequent_boundary_color(image, boundary_coords, inner_rect_coords):
    boundary_x1, boundary_y1 = boundary_coords[0]
    boundary_x2, boundary_y2 = boundary_coords[1]
    
    inner_x1, inner_y1 = inner_rect_coords[0]
    inner_x2, inner_y2 = inner_rect_coords[1]

    # Store the most frequent colors in each boundary
    frequent_colors = []

    # Top boundary
    if inner_y1 > boundary_y1:
        top_boundary = image[boundary_y1:inner_y1, boundary_x1:boundary_x2]
        frequent_colors.append(get_most_frequent_color_in_boundary(top_boundary))
    
    # Bottom boundary
    if boundary_y2 > inner_y2:
        bottom_boundary = image[inner_y2:boundary_y2, boundary_x1:boundary_x2]
        frequent_colors.append(get_most_frequent_color_in_boundary(bottom_boundary))
    
    # Left boundary
    if inner_x1 > boundary_x1:
        left_boundary = image[inner_y1:inner_y2, boundary_x1:inner_x1]
        frequent_colors.append(get_most_frequent_color_in_boundary(left_boundary))
    
    # Right boundary
    if boundary_x2 > inner_x2:
        right_boundary = image[inner_y1:inner_y2, inner_x2:boundary_x2]
        frequent_colors.append(get_most_frequent_color_in_boundary(right_boundary))

    # Find the most frequent color across all boundaries
    overall_color = max(set(frequent_colors), key=frequent_colors.count)
    
    return overall_color





# Function to get the most frequent color around the rectangle's boundaries
def get_most_frequent_boundary_color(image, boundary_coords, inner_rect_coords):
    boundary_x1, boundary_y1 = boundary_coords[0]
    boundary_x2, boundary_y2 = boundary_coords[1]
    
    inner_x1, inner_y1 = inner_rect_coords[0]
    inner_x2, inner_y2 = inner_rect_coords[1]

    # Store the most frequent colors in each boundary
    frequent_colors = []

    # Top boundary
    if inner_y1 > boundary_y1:
        top_boundary = image[boundary_y1:inner_y1, boundary_x1:boundary_x2]
        frequent_colors.append(tuple(get_most_frequent_color_in_boundary(top_boundary)))
    
    # Bottom boundary
    if boundary_y2 > inner_y2:
        bottom_boundary = image[inner_y2:boundary_y2, boundary_x1:boundary_x2]
        frequent_colors.append(tuple(get_most_frequent_color_in_boundary(bottom_boundary)))
    
    # Left boundary
    if inner_x1 > boundary_x1:
        left_boundary = image[inner_y1:inner_y2, boundary_x1:inner_x1]
        frequent_colors.append(tuple(get_most_frequent_color_in_boundary(left_boundary)))
    
    # Right boundary
    if boundary_x2 > inner_x2:
        right_boundary = image[inner_y1:inner_y2, inner_x2:boundary_x2]
        frequent_colors.append(tuple(get_most_frequent_color_in_boundary(right_boundary)))

    # Find the most frequent color across all boundaries
    overall_color = max(set(frequent_colors), key=frequent_colors.count)
    
    return overall_color


