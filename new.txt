import cv2
import numpy as np
import os
import keras_ocr

# Function to detect and inpaint characters
def inpaint_text_by_character(img_path, output_dir):
    # Read the image
    img = cv2.imread(img_path)
    
    # Convert image to RGB (needed for Keras OCR)
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    
    # Initialize Keras OCR pipeline
    pipeline = keras_ocr.pipeline.Pipeline()
    
    # Detect text using Keras OCR
    prediction_groups = pipeline.recognize([img_rgb])

    # Create a mask for inpainting
    mask = np.zeros(img.shape[:2], dtype="uint8")
    
    # Iterate through detected words and create a mask
    for prediction in prediction_groups[0]:
        box = prediction[1]  # Get the bounding box of the word
        x_min = int(min([point[0] for point in box]))
        y_min = int(min([point[1] for point in box]))
        x_max = int(max([point[0] for point in box]))
        y_max = int(max([point[1] for point in box]))
        
        # Create the mask for inpainting (character-level)
        cv2.rectangle(mask, (x_min, y_min), (x_max, y_max), 255, -1)

    # Inpaint the masked text regions using cv2.INPAINT_TELEA
    inpainted_img = cv2.inpaint(img, mask, 7, cv2.INPAINT_TELEA)

    # Post-processing to remove leftover dots or artifacts
    kernel = np.ones((3, 3), np.uint8)
    inpainted_img = cv2.morphologyEx(inpainted_img, cv2.MORPH_CLOSE, kernel)  # Dilation followed by erosion
    
    # Save the final image
    filename = os.path.basename(img_path)
    output_path = os.path.join(output_dir, filename)
    cv2.imwrite(output_path, inpainted_img)

# Directory paths
input_dir = 'input'
output_dir = 'outputTess'

# Create output directory if it doesn't exist
os.makedirs(output_dir, exist_ok=True)

# Process all images in the input directory
for filename in os.listdir(input_dir):
    if filename.lower().endswith(('.png', '.jpg', '.jpeg')):  # Check for image file extensions
        img_path = os.path.join(input_dir, filename)
        inpaint_text_by_character(img_path, output_dir)

print("Processing complete. Output images saved in 'outputTess' directory.")
